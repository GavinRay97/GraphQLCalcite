Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import net.bnb1.kradle.blueprints.JavaBlueprint\r\n\r\nplugins {\r\n    id(\"java\")\r\n\r\n    id(\"org.jetbrains.kotlin.jvm\") version \"1.6.10\"\r\n    id(\"org.jetbrains.qodana\") version \"0.1.12\"\r\n    id(\"org.jetbrains.kotlinx.kover\") version \"0.4.4\"\r\n\r\n    // https://github.com/mrkuz/kradle\r\n    id(\"net.bitsandbobs.kradle-app\") version \"1.2.0\"\r\n}\r\n\r\ngroup = \"com.example\"\r\nversion = \"1.0-SNAPSHOT\"\r\n\r\nrepositories {\r\n    mavenCentral()\r\n    maven(\r\n        \"https://repository.apache.org/content/repositories/snapshots\"\r\n    )\r\n    maven(\r\n        \"https://oss.sonatype.org/content/repositories/snapshots\"\r\n    )\r\n}\r\n\r\njava {\r\n    toolchain {\r\n        languageVersion.set(JavaLanguageVersion.of(17))\r\n    }\r\n}\r\n\r\ntasks {\r\n    compileKotlin {\r\n        kotlinOptions {\r\n            jvmTarget = \"17\"\r\n        }\r\n    }\r\n    compileTestKotlin {\r\n        kotlinOptions {\r\n            jvmTarget = \"17\"\r\n        }\r\n    }\r\n}\r\n\r\nqodana {\r\n    showReportPort.set(8888)\r\n}\r\n\r\nkradle {\r\n    // Disable Java blueprint to be able to use \"toolchains\" instead\r\n    disable(JavaBlueprint::class.java)\r\n    mainClass(\"com.example.ExampleKotlin\")\r\n    kotlinxCoroutinesVersion(\"1.6.0-RC2\")\r\n    ktlintVersion(\"0.43.2\")\r\n    detektVersion(\"1.19.0\")\r\n    jmhVersion(\"1.32\")\r\n    tests {\r\n        junitJupiterVersion(\"5.8.2\")\r\n        jacocoVersion(\"0.8.7\")\r\n        useKotest(\"5.0.2\")\r\n        useMockk(\"1.12.1\")\r\n    }\r\n}\r\n\r\ntasks.withType<JavaCompile> {\r\n    options.compilerArgs.add(\"--enable-preview\")\r\n}\r\n\r\ntasks.withType<Test> {\r\n    jvmArgs(\"--enable-preview\")\r\n}\r\n\r\ntasks.withType<JavaExec> {\r\n    jvmArgs(\"--enable-preview\")\r\n}\r\n\r\ndependencies {\r\n    implementation(\"org.apache.calcite:calcite-core:1.29.0-SNAPSHOT\")\r\n    compileOnly(\"org.immutables:value:2.8.8\")\r\n\r\n    implementation(\"com.graphql-java:graphql-java:17.3\")\r\n}\r\n\r\ntasks.named<Test>(\"test\") {\r\n    useJUnitPlatform()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
--- a/build.gradle.kts	(revision b8159658ddf11d2167449f33e40caf17b03f9ee7)
+++ b/build.gradle.kts	(date 1640999941625)
@@ -1,5 +1,3 @@
-import net.bnb1.kradle.blueprints.JavaBlueprint
-
 plugins {
     id("java")
 
@@ -8,7 +6,7 @@
     id("org.jetbrains.kotlinx.kover") version "0.4.4"
 
     // https://github.com/mrkuz/kradle
-    id("net.bitsandbobs.kradle-app") version "1.2.0"
+    id("net.bitsandbobs.kradle") version "2.0.0"
 }
 
 group = "com.example"
@@ -24,64 +22,121 @@
     )
 }
 
-java {
-    toolchain {
-        languageVersion.set(JavaLanguageVersion.of(17))
-    }
-}
-
-tasks {
-    compileKotlin {
-        kotlinOptions {
-            jvmTarget = "17"
-        }
-    }
-    compileTestKotlin {
-        kotlinOptions {
-            jvmTarget = "17"
-        }
-    }
-}
-
 qodana {
     showReportPort.set(8888)
 }
 
 kradle {
-    // Disable Java blueprint to be able to use "toolchains" instead
-    disable(JavaBlueprint::class.java)
-    mainClass("com.example.ExampleKotlin")
-    kotlinxCoroutinesVersion("1.6.0-RC2")
-    ktlintVersion("0.43.2")
-    detektVersion("1.19.0")
-    jmhVersion("1.32")
-    tests {
-        junitJupiterVersion("5.8.2")
-        jacocoVersion("0.8.7")
-        useKotest("5.0.2")
-        useMockk("1.12.1")
-    }
-}
+    general {
+        // bootstrap.enable()
+        // git.enable()
+        projectProperties.enable()
+        buildProperties.enable()
+    }
+
+    jvm {
+        targetJvm("17")
+        kotlin {
+            useCoroutines("1.6.0")
+            lint {
+                ktlintVersion("0.43.2")
+            }
+            codeAnalysis {
+                // detektConfigFile("detekt-config.yml")
+                detektVersion("1.19.0")
+            }
+            test {
+                useKotest("5.0.3")
+                useMockk("1.12.1")
+            }
+        }
+        application {
+            mainClass("com.example.ExampleKotlin")
+        }
+        // library.enable() // Conflicts with application
+
+        dependencyUpdates.enable()
+        // vulnerabilityScan.enable()
+        lint.enable()
+        codeAnalysis.enable()
+        developmentMode.enable()
 
-tasks.withType<JavaCompile> {
-    options.compilerArgs.add("--enable-preview")
-}
+        test {
+            prettyPrint(true)
+            withIntegrationTests(true)
+            withFunctionalTests(true)
+            withJunitJupiter("5.8.2")
+            // withJacoco(/* "0.8.7" */)
+        }
 
-tasks.withType<Test> {
-    jvmArgs("--enable-preview")
-}
+        benchmark {
+            jmhVersion("1.34")
+        }
 
-tasks.withType<JavaExec> {
-    jvmArgs("--enable-preview")
+        packaging {
+            uberJar {
+                minimize(true)
+            }
+        }
+
+        docker {
+            baseImage("bellsoft/liberica-openjdk-alpine:17")
+            withJvmKill("1.16.0")
+            withAppSh(true)
+            // ports.add(8080)
+            jvmOpts("-Xmx1G")
+        }
+
+        documentation.enable()
+    }
+}
+
+tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().configureEach {
+    usePreciseJavaTracking = true
+    kotlinOptions {
+        usePreciseJavaTracking = true
+        jvmTarget = "17"
+        useFir = true
+        freeCompilerArgs = freeCompilerArgs + listOf(
+            "-opt-in=kotlin.RequiresOptIn",
+            "-Xabi-stability=stable",
+            "-Xassertions=jvm",
+            "-Xenhance-type-parameter-types-to-def-not-null",
+            "-Xjsr305=strict",
+            "-Xjvm-default=all",
+            "-Xlambdas=indy",
+            "-Xparallel-backend-threads=0",
+            "-Xsam-conversions=indy",
+            "-Xstrict-java-nullability-assertions",
+            "-Xtype-enhancement-improvements-strict-mode",
+            "-Xuse-fast-jar-file-system",
+            "-Xeffect-system",
+            "-Xenable-builder-inference",
+            "-Xexpect-actual-linker",
+            "-Xextended-compiler-checks",
+            // "-Xinference-compatibility",
+            "-Xinline-classes",
+            "-Xnew-inference",
+            "-Xpolymorphic-signature",
+            "-Xread-deserialized-contracts",
+            "-Xself-upper-bound-inference",
+            "-Xunrestricted-builder-inference",
+            "-Xuse-fir",
+            "-Xuse-fir-extended-checkers",
+        )
+    }
+}
+
+object Versions {
+    const val calcite = "1.29.0"
 }
 
 dependencies {
-    implementation("org.apache.calcite:calcite-core:1.29.0-SNAPSHOT")
-    compileOnly("org.immutables:value:2.8.8")
-
     implementation("com.graphql-java:graphql-java:17.3")
-}
+    implementation("org.apache.calcite:calcite-core:${Versions.calcite}")
+    implementation("org.apache.calcite:calcite-testkit:${Versions.calcite}")
+    // Use 2.4.1 to remain compatible with Calcite
+    implementation("org.hsqldb:hsqldb:2.4.1")
 
-tasks.named<Test>("test") {
-    useJUnitPlatform()
+    compileOnly("org.immutables:value:2.8.8")
 }
